package rdb

import (
	"bufio"
	"bytes"
	"io"
	"testing"
)

func TestNewRDBByteReader(t *testing.T) {
	tests := []struct {
		Redis    []byte
		Expected error
	}{
		{
			Redis: []byte{
				0x52, 0x45, 0x44, 0x49, 0x53, 0x30, 0x30, 0x30, 0x38, 0xFA, 0x09, 0x72, 0x65, 0x64, 0x69, 0x73,
				0x2D, 0x76, 0x65, 0x72, 0x06, 0x34, 0x2E, 0x30, 0x2E, 0x31, 0x31, 0xFA, 0x0A, 0x72, 0x65, 0x64,
				0x69, 0x73, 0x2D, 0x62, 0x69, 0x74, 0x73, 0xC0, 0x40, 0xFA, 0x05, 0x63, 0x74, 0x69, 0x6D, 0x65,
				0xC2, 0x8F, 0xE2, 0x8C, 0x5B, 0xFA, 0x08, 0x75, 0x73, 0x65, 0x64, 0x2D, 0x6D, 0x65, 0x6D, 0xC2,
				0x18, 0x00, 0x0C, 0x00, 0xFA, 0x0C, 0x61, 0x6F, 0x66, 0x2D, 0x70, 0x72, 0x65, 0x61, 0x6D, 0x62,
				0x6C, 0x65, 0xC0, 0x00, 0xFF, 0x1C, 0x2A, 0x76, 0xC3, 0xE9, 0xF5, 0x2A, 0x6A,
			},
			Expected: nil,
		},
		{
			Redis: []byte{
				0x52, 0x45, 0x44, 0x50, 0x53, 0x30, 0x30, 0x30, 0x38, 0xFA, 0x09, 0x72, 0x65, 0x64, 0x69, 0x73,
				0x2D, 0x76, 0x65, 0x72, 0x06, 0x34, 0x2E, 0x30, 0x2E, 0x31, 0x31, 0xFA, 0x0A, 0x72, 0x65, 0x64,
				0x69, 0x73, 0x2D, 0x62, 0x69, 0x74, 0x73, 0xC0, 0x40, 0xFA, 0x05, 0x63, 0x74, 0x69, 0x6D, 0x65,
				0xC2, 0x8F, 0xE2, 0x8C, 0x5B, 0xFA, 0x08, 0x75, 0x73, 0x65, 0x64, 0x2D, 0x6D, 0x65, 0x6D, 0xC2,
				0x18, 0x00, 0x0C, 0x00, 0xFA, 0x0C, 0x61, 0x6F, 0x66, 0x2D, 0x70, 0x72, 0x65, 0x61, 0x6D, 0x62,
				0x6C, 0x65, 0xC0, 0x00, 0xFF, 0x1C, 0x2A, 0x76, 0xC3, 0xE9, 0xF5, 0x2A, 0x6A,
			},
			Expected: ErrFormat,
		},
		{
			Redis:    []byte{},
			Expected: io.EOF,
		},
		{
			Redis: []byte{
				0x52, 0x45, 0x44,
			},
			Expected: ErrFormat,
		},
		{
			Redis: []byte{
				0x52, 0x45, 0x44, 0x49, 0x53, 0x30, 0x30, 0x00, 0x32, 0xFA, 0x09, 0x72, 0x65, 0x64, 0x69, 0x73,
				0x2D, 0x76, 0x65, 0x72, 0x06, 0x34, 0x2E, 0x30, 0x2E, 0x31, 0x31, 0xFA, 0x0A, 0x72, 0x65, 0x64,
				0x69, 0x73, 0x2D, 0x62, 0x69, 0x74, 0x73, 0xC0, 0x40, 0xFA, 0x05, 0x63, 0x74, 0x69, 0x6D, 0x65,
				0xC2, 0x8F, 0xE2, 0x8C, 0x5B, 0xFA, 0x08, 0x75, 0x73, 0x65, 0x64, 0x2D, 0x6D, 0x65, 0x6D, 0xC2,
				0x18, 0x00, 0x0C, 0x00, 0xFA, 0x0C, 0x61, 0x6F, 0x66, 0x2D, 0x70, 0x72, 0x65, 0x61, 0x6D, 0x62,
				0x6C, 0x65, 0xC0, 0x00, 0xFF, 0x1C, 0x2A, 0x76, 0xC3, 0xE9, 0xF5, 0x2A, 0x6A,
			},
			Expected: ErrFormat,
		},
		{
			Redis: []byte{
				0x52, 0x45, 0x44, 0x49, 0x53, 0x30, 0x30, 0x30, 0x32, 0xFA, 0x09, 0x72, 0x65, 0x64, 0x69, 0x73,
				0x2D, 0x76, 0x65, 0x72, 0x06, 0x34, 0x2E, 0x30, 0x2E, 0x31, 0x31, 0xFA, 0x0A, 0x72, 0x65, 0x64,
				0x69, 0x73, 0x2D, 0x62, 0x69, 0x74, 0x73, 0xC0, 0x40, 0xFA, 0x05, 0x63, 0x74, 0x69, 0x6D, 0x65,
				0xC2, 0x8F, 0xE2, 0x8C, 0x5B, 0xFA, 0x08, 0x75, 0x73, 0x65, 0x64, 0x2D, 0x6D, 0x65, 0x6D, 0xC2,
				0x18, 0x00, 0x0C, 0x00, 0xFA, 0x0C, 0x61, 0x6F, 0x66, 0x2D, 0x70, 0x72, 0x65, 0x61, 0x6D, 0x62,
				0x6C, 0x65, 0xC0, 0x00, 0xFF, 0x1C, 0x2A, 0x76, 0xC3, 0xE9, 0xF5, 0x2A, 0x6A,
			},
			Expected: ErrVersion,
		},
	}

	for _, tt := range tests {
		if _, err := NewReader(bytes.NewReader(tt.Redis)); err != tt.Expected {
			t.Errorf("Expected '%v' got '%v'", tt.Expected, err)
		}
	}
}

func TestReadFieldLength(t *testing.T) {
	tests := []struct {
		Buffer        []byte
		ExpectedValue []byte
		ExpectedErr   error
	}{
		{
			Buffer:        []byte{0x05},
			ExpectedValue: []byte{0x05},
			ExpectedErr:   nil,
		},
		{
			Buffer:        []byte{0x42, 0xFF},
			ExpectedValue: []byte{0x02, 0xFF},
			ExpectedErr:   nil,
		},
		{
			Buffer:        []byte{0x80, 0x42, 0x31, 0x20, 0x53},
			ExpectedValue: []byte{0x42, 0x31, 0x20, 0x53},
			ExpectedErr:   nil,
		},
		{
			Buffer:        []byte{0x80, 0x42, 0x31, 0x20},
			ExpectedValue: nil,
			ExpectedErr:   ErrFormat,
		},
		{
			Buffer:        []byte{0x80},
			ExpectedValue: nil,
			ExpectedErr:   io.EOF,
		},
		{
			Buffer:        []byte{0x81, 0x01, 0x12, 0x23, 0x34, 0x45, 0x56, 0x67, 0x78},
			ExpectedValue: []byte{0x01, 0x12, 0x23, 0x34, 0x45, 0x56, 0x67, 0x78},
			ExpectedErr:   nil,
		},
		{
			Buffer:        []byte{0x81, 0x12, 0x23, 0x34, 0x45, 0x56, 0x67, 0x78},
			ExpectedValue: nil,
			ExpectedErr:   ErrFormat,
		},
		{
			Buffer:        []byte{0xFF},
			ExpectedValue: nil,
			ExpectedErr:   ErrFormat,
		},
		{
			Buffer:        []byte{0x42},
			ExpectedValue: nil,
			ExpectedErr:   io.EOF,
		},
		{
			Buffer:        []byte{},
			ExpectedValue: nil,
			ExpectedErr:   io.EOF,
		},
	}

	for _, tt := range tests {
		bs, err := readFieldLength(bufio.NewReader(bytes.NewReader(tt.Buffer)))
		if !bytes.Equal(tt.ExpectedValue, bs) {
			t.Errorf("Expected '%v' got '%v'", tt.ExpectedValue, bs)
		}
		if tt.ExpectedErr != err {
			t.Errorf("Expected '%v' got '%v'", tt.ExpectedErr, err)
		}
	}
}
